USE HOTELBOOKINGDB
GO

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA ROLES
-- =============================================

-- PROCEDIMIENTO PARA LISTAR TODOS LOS ROLES
CREATE OR ALTER PROCEDURE SP_ROLE_LIST
AS
BEGIN
    SELECT ROLEID, NAME FROM ROLES;
END
GO

-- PROCEDIMIENTO PARA OBTENER UN ROL POR SU ID
CREATE OR ALTER PROCEDURE SP_ROLE_BY_ID
    @ROLEID INT
AS
BEGIN
    SELECT ROLEID, NAME FROM ROLES WHERE ROLEID = @ROLEID;
END
GO

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA USERS
-- =============================================

-- PROCEDIMIENTO PARA LISTAR TODOS LOS USUARIOS
CREATE OR ALTER PROCEDURE SP_USER_LIST
AS
BEGIN
    SELECT 
        U.USERID,
        U.FIRSTNAME,
        U.LASTNAME,
        U.EMAIL,
        U.ROLEID,
        R.NAME AS ROLENAME,
        CASE U.STATE
            WHEN 1 THEN 'ACTIVO' 
            ELSE 'INACTIVO' 
        END AS STATENAME,
        U.AUDITCREATEDATE
    FROM USERS U
    INNER JOIN ROLES R ON U.ROLEID = R.ROLEID;
END
GO

CREATE OR ALTER PROCEDURE SP_USER_CREATE
(
    @FIRSTNAME VARCHAR(50),
    @LASTNAME VARCHAR(50),
    @EMAIL VARCHAR(255),
    @PASSWORD VARCHAR(MAX),
    @ROLEID INT
)
AS
BEGIN
    -- VERIFICAR SI EL EMAIL YA EXISTE EN LA TABLA
    IF EXISTS (SELECT 1 FROM USERS WHERE EMAIL = @EMAIL)
    BEGIN
        
        RAISERROR('EL EMAIL YA EXISTE EN LA BASE DE DATOS', 16, 1)
        RETURN -1 -- CÓDIGO DE ERROR PERSONALIZADO, PUEDES ELEGIR EL QUE MEJOR SE AJUSTE A TU APLICACIÓN
    END
    ELSE
    BEGIN
        -- SI EL EMAIL NO EXISTE, PROCEDER CON LA INSERCIÓN
        INSERT INTO USERS (FIRSTNAME, LASTNAME, EMAIL, PASSWORD, ROLEID, STATE, AUDITCREATEDATE)
	    VALUES (@FIRSTNAME, @LASTNAME, @EMAIL, @PASSWORD, @ROLEID, 1, GETDATE())
        RETURN @@IDENTITY -- RETORNAR EL ID DEL REGISTRO INSERTADO, SI ES NECESARIO
    END
END
GO


-- PROCEDIMIENTO PARA EDITAR UN USUARIO EXISTENTE
CREATE OR ALTER PROCEDURE SP_USER_UPDATE
    @USERID INT,
    @FIRSTNAME VARCHAR(50),
    @LASTNAME VARCHAR(50),
    @EMAIL VARCHAR(255),
    @PASSWORD VARCHAR(MAX),
    @ROLEID INT   
AS
BEGIN
    UPDATE USERS
    SET 
        FIRSTNAME = @FIRSTNAME,
        LASTNAME = @LASTNAME,
        EMAIL = @EMAIL,
        PASSWORD = @PASSWORD,
        ROLEID = @ROLEID
        
    WHERE USERID = @USERID;
END
GO

CREATE OR ALTER PROCEDURE SP_USER_DELETE
    @USERID INT
AS
BEGIN
    -- Verificar si el usuario está asociado a alguna reserva
    IF EXISTS (SELECT 1 FROM RESERVATIONS WHERE USERID = @USERID)
    BEGIN
        RAISERROR('No se puede eliminar al usuario porque está asociado a reservas.', 16, 1);
        RETURN -1;
    END

    -- Verificar si el usuario tiene notificaciones
    IF EXISTS (SELECT 1 FROM NOTIFICATIONS WHERE USERID = @USERID)
    BEGIN
        RAISERROR('No se puede eliminar al usuario porque tiene notificaciones.', 16, 1);
        RETURN -1;
    END

    -- Si no hay relaciones, eliminar al usuario
    DELETE FROM USERS WHERE USERID = @USERID;
END
GO


-- PROCEDIMIENTO PARA CAMBIAR EL ESTADO DE UN USUARIO
CREATE OR ALTER PROCEDURE SP_USER_CHANGE_STATE
    @USERID INT,
    @STATE INT
AS
BEGIN
    UPDATE USERS
    SET STATE = @STATE
    WHERE USERID = @USERID;
END
GO

CREATE OR ALTER PROCEDURE SP_USER_BY_EMAIL
(
	@EMAIL VARCHAR(255)
)
AS
BEGIN
	SELECT
		*
	FROM USERS
	WHERE EMAIL = @EMAIL
END
GO
-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA CITIES
-- =============================================

-- PROCEDIMIENTO PARA LISTAR TODAS LAS CIUDADES
CREATE OR ALTER PROCEDURE SP_CITY_LIST
AS
BEGIN
    SELECT CITYID, NAME FROM CITIES;
END
GO

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA HOTELS
-- =============================================
-- PROCEDIMIENTO PARA LISTAR TODOS LOS HOTELES
CREATE OR ALTER PROCEDURE SP_HOTEL_LIST
AS
BEGIN
    SELECT 
        H.HOTELID,
        H.NAME,
        H.ADDRESS,
        C.NAME AS CITYNAME,
        H.COMMISSIONRATE,
        CASE H.STATE WHEN 1 THEN 'ACTIVO' ELSE 'INACTIVO' END AS STATENAME,
        H.AUDITCREATEDATE
    FROM HOTELS H
    INNER JOIN CITIES C ON H.CITYID = C.CITYID;
END
GO
-- PROCEDIMIENTO PARA REGISTRAR UN NUEVO HOTEL
CREATE OR ALTER PROCEDURE SP_HOTEL_CREATE
    @NAME VARCHAR(100),
    @ADDRESS VARCHAR(255),
    @CITYID INT,
    @COMMISSIONRATE DECIMAL(18,2)
AS
BEGIN
       -- Verificar si la ciudad existe
    IF NOT EXISTS (SELECT 1 FROM CITIES WHERE CITYID = @CITYID)
    BEGIN
        RAISERROR('La ciudad especificada no existe.', 16, 1);
        RETURN;
    END

    -- Verificar si el hotel ya existe en la ciudad
    IF EXISTS (SELECT 1 FROM HOTELS WHERE NAME = @NAME AND CITYID = @CITYID)
    BEGIN
        RAISERROR('Ya existe un hotel con este nombre en la misma ciudad.', 16, 1);
        RETURN;
    END

    -- Insertar el nuevo hotel
    INSERT INTO HOTELS (NAME, ADDRESS, CITYID, COMMISSIONRATE, STATE, AUDITCREATEDATE)
    VALUES (@NAME, @ADDRESS, @CITYID, @COMMISSIONRATE, 1, GETDATE());
    
    -- Retornar el ID del hotel recién creado
    SELECT SCOPE_IDENTITY()
END
GO



-- PROCEDIMIENTO PARA EDITAR UN HOTEL EXISTENTE
CREATE OR ALTER PROCEDURE SP_HOTEL_UPDATE
    @HOTELID INT,
    @NAME VARCHAR(100),
    @ADDRESS VARCHAR(255),
    @CITYID INT,
    @COMMISSIONRATE DECIMAL(18,2)
AS
BEGIN
     -- Verificar si el hotel existe
    IF NOT EXISTS (SELECT 1 FROM HOTELS WHERE HOTELID = @HOTELID)
    BEGIN
        RAISERROR('El hotel especificado no existe.', 16, 1);
        RETURN;
    END

    -- Verificar si la ciudad existe
    IF NOT EXISTS (SELECT 1 FROM CITIES WHERE CITYID = @CITYID)
    BEGIN
        RAISERROR('La ciudad especificada no existe.', 16, 1);
        RETURN;
    END

    -- Verificar si ya existe un hotel con el mismo nombre en la misma ciudad (excluyendo el actual)
    IF EXISTS (SELECT 1 FROM HOTELS WHERE NAME = @NAME AND CITYID = @CITYID AND HOTELID <> @HOTELID)
    BEGIN
        RAISERROR('Ya existe otro hotel con este nombre en la misma ciudad.', 16, 1);
        RETURN;
    END

    -- Actualizar el hotel
    UPDATE HOTELS
    SET 
        NAME = @NAME,
        ADDRESS = @ADDRESS,
        CITYID = @CITYID,
        COMMISSIONRATE = @COMMISSIONRATE
    WHERE HOTELID = @HOTELID;

END
GO


-- PROCEDIMIENTO PARA CAMBIAR EL ESTADO DE UN HOTEL
CREATE OR ALTER PROCEDURE SP_HOTEL_CHANGE_STATE
    @HOTELID INT,
    @STATE INT
AS
BEGIN 
    UPDATE HOTELS
    SET STATE = @STATE
    WHERE HOTELID = @HOTELID;
END
GO

-- PROCEDIMIENTO PARA ELIMINAR UN HOTEL (VALIDANDO QUE NO TENGA HABITACIONES ASOCIADAS)
CREATE OR ALTER PROCEDURE SP_HOTEL_DELETE
    @HOTELID INT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM ROOMS WHERE HOTELID = @HOTELID)
    BEGIN
        RAISERROR('No se puede eliminar el hotel porque tiene habitaciones asociadas.', 16, 1);
        RETURN;
    END
    
    DELETE FROM HOTELS WHERE HOTELID = @HOTELID;
END
GO
-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA ROOMTYPES
-- =============================================

-- PROCEDIMIENTO PARA LISTAR TODOS LOS TIPOS DE HABITACIÓN
CREATE OR ALTER PROCEDURE SP_ROOMTYPE_LIST
AS
BEGIN
    SELECT 
        ROOMTYPEID,
        NAME
    FROM ROOMTYPES;
END
GO

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA ROOMS
-- =============================================
-- PROCEDIMIENTO PARA LISTAR TODAS LAS HABITACIONES
CREATE OR ALTER PROCEDURE SP_ROOM_LIST
AS
BEGIN
    SELECT 
        R.ROOMID,
        R.HOTELID,
        H.NAME AS HOTELNAME,
        R.ROOMTYPEID,
        RT.NAME AS ROOMTYPENAME,
		R.CAPACITY,
        R.BASECOST,
        R.TAXES,
        R.LOCATION,
        CASE R.STATE WHEN 1 THEN 'HABILITADO' ELSE 'DESHABILITADO' END AS STATENAME,
        R.AUDITCREATEDATE
    FROM ROOMS R
    INNER JOIN HOTELS H ON R.HOTELID = H.HOTELID
    INNER JOIN ROOMTYPES RT ON R.ROOMTYPEID = RT.ROOMTYPEID;
END
GO

-- PROCEDIMIENTO PARA REGISTRAR UNA NUEVA HABITACIÓN
CREATE OR ALTER PROCEDURE SP_ROOM_CREATE
    @HOTELID INT,
    @ROOMTYPEID INT,
    @CAPACITY INT,
    @BASECOST DECIMAL(18,2),
    @TAXES DECIMAL(18,2),
    @LOCATION VARCHAR(100)
AS
BEGIN
    -- Verificar si el hotel existe
    IF NOT EXISTS (SELECT 1 FROM HOTELS WHERE HOTELID = @HOTELID)
    BEGIN
        RAISERROR('El hotel especificado no existe.', 16, 1);
        RETURN -1; -- Código de error personalizado
    END

    -- Verificar si el tipo de habitación existe
    IF NOT EXISTS (SELECT 1 FROM ROOMTYPES WHERE ROOMTYPEID = @ROOMTYPEID)
    BEGIN
        RAISERROR('El tipo de habitación especificado no existe.', 16, 1);
        RETURN -1; -- Código de error personalizado
    END

    -- Insertar la nueva habitación en la tabla ROOMS
    INSERT INTO ROOMS (HOTELID, ROOMTYPEID, CAPACITY, BASECOST, TAXES, LOCATION, STATE, AUDITCREATEDATE)
    VALUES (@HOTELID, @ROOMTYPEID, @CAPACITY, @BASECOST, @TAXES, @LOCATION, 1, GETDATE());
    
    -- Retornar el ID de la nueva habitación registrada
    RETURN SCOPE_IDENTITY();
END
GO


-- PROCEDIMIENTO PARA EDITAR UNA HABITACIÓN EXISTENTE
CREATE OR ALTER PROCEDURE SP_ROOM_UPDATE
    @ROOMID INT,
    @HOTELID INT,
    @ROOMTYPEID INT,
    @CAPACITY INT,
    @BASECOST DECIMAL(18,2),
    @TAXES DECIMAL(18,2),
    @LOCATION VARCHAR(100)
AS
BEGIN
    -- Verificar si la habitación existe
    IF NOT EXISTS (SELECT 1 FROM ROOMS WHERE ROOMID = @ROOMID)
    BEGIN
        RAISERROR('La habitación especificada no existe.', 16, 1);
        RETURN;
    END

    -- Verificar si el hotel existe
    IF NOT EXISTS (SELECT 1 FROM HOTELS WHERE HOTELID = @HOTELID)
    BEGIN
        RAISERROR('El hotel especificado no existe.', 16, 1);
        RETURN;
    END

    -- Verificar si el tipo de habitación existe
    IF NOT EXISTS (SELECT 1 FROM ROOMTYPES WHERE ROOMTYPEID = @ROOMTYPEID)
    BEGIN
        RAISERROR('El tipo de habitación especificado no existe.', 16, 1);
        RETURN;
    END

    -- Actualizar la habitación
    UPDATE ROOMS
    SET 
        HOTELID = @HOTELID,
        ROOMTYPEID = @ROOMTYPEID,
        CAPACITY = @CAPACITY,
        BASECOST = @BASECOST,
        TAXES = @TAXES,
        LOCATION = @LOCATION
    WHERE ROOMID = @ROOMID;
END
GO


-- PROCEDIMIENTO PARA CAMBIAR EL ESTADO DE UNA HABITACIÓN
CREATE OR ALTER PROCEDURE SP_ROOM_CHANGE_STATE
    @ROOMID INT,
    @STATE INT
AS
BEGIN 
    UPDATE ROOMS
    SET STATE = @STATE
    WHERE ROOMID = @ROOMID;
END
GO

-- =============================================
-- PROCEDIMIENTOS ALMACENADOS PARA LA TABLA RESERVATIONS
-- =============================================
-- PROCEDIMIENTO PARA LISTAR TODAS LAS RESERVATIONS



CREATE OR ALTER PROCEDURE SP_RESERVATION_LIST_ALL
AS
BEGIN
    SELECT 
        R.RESERVATIONID,
         CONVERT(CHAR(10), R.CHECKINDATE, 103) AS CHECKINDATE,
        CONVERT(CHAR(10), R.CHECKOUTDATE, 103) AS CHECKOUTDATE,     
        -- Cálculo del costo total de la reservación
        DATEDIFF(DAY, R.CHECKINDATE, R.CHECKOUTDATE) * (RM.BASECOST + RM.TAXES) AS TOTALCOST,
        
        CASE 
            WHEN R.STATE = 1 THEN 'Confirmada'
            WHEN R.STATE = 2 THEN 'Cancelada'
            WHEN R.STATE = 3 THEN 'Check-in Realizado'
            WHEN R.STATE = 4 THEN 'Check-out Realizado'
            ELSE 'Desconocido'
        END AS RESERVATIONSTATE,
        
        R.AUDITCREATEDATE,
        U.FIRSTNAME + ' ' + U.LASTNAME AS BOOKEDBY,
        H.NAME AS HOTELNAME,
        H.ADDRESS AS HOTELADDRESS,
        C.NAME AS CITYNAME, 
        RT.NAME AS ROOMTYPE,
        RM.CAPACITY AS ROOMCAPACITY,
        G.FIRSTNAME + ' ' + G.LASTNAME AS GUESTNAME,
        G.BIRTHDATE AS GUESTBIRTHDATE,
        GE.NAME AS GENDER,
        G.DOCUMENTNUMBER AS GUESTDOCUMENT,
        DT.NAME AS DOCUMENTTYPE,
        G.EMAIL AS GUESTEMAIL,
        G.PHONE AS GUESTPHONE,
        EC.FULLNAME AS EMERGENCYCONTACT,
        EC.PHONE AS EMERGENCYPHONE,
        
        -- Cálculo del costo total por noche
        (RM.BASECOST + RM.TAXES) AS TOTALCOSTPERNIGHT

    FROM RESERVATIONS R
    INNER JOIN USERS U ON R.USERID = U.USERID
    INNER JOIN ROOMS RM ON R.ROOMID = RM.ROOMID
    INNER JOIN HOTELS H ON RM.HOTELID = H.HOTELID
    INNER JOIN CITIES C ON H.CITYID = C.CITYID 
    INNER JOIN ROOMTYPES RT ON RM.ROOMTYPEID = RT.ROOMTYPEID
    LEFT JOIN GUESTS G ON R.RESERVATIONID = G.RESERVATIONID
    LEFT JOIN GENDERS GE ON G.GENDERID = GE.GENDERID
    LEFT JOIN DOCUMENTTYPES DT ON G.DOCUMENTTYPEID = DT.DOCUMENTTYPEID
    LEFT JOIN EMERGENCYCONTACTS EC ON R.RESERVATIONID = EC.RESERVATIONID
    ORDER BY R.AUDITCREATEDATE DESC;
END
GO





-- Listar reservas del agente con ID = 1
--EXEC SP_RESERVATION_LIST_BY_AGENT @USERID = 1;

---- Ver detalle de la reserva ID = 1 (solo si el agente tiene permisos)
--EXEC SP_RESERVATION_DETAIL_BY_ID @RESERVATIONID = 1, @USERID = 1;